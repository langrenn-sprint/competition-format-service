[project]
authors = [
    { name = "Stig B. Dørmænen", email = "stigbd@gmail.com" },
    { name = "Heming Harnæs", email = "heming.harnaes@gmail.com" },
]
name = "competition-format-service"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
description = "An API for admin of sporting events - format"
license = "Apache-2.0"
version = "0.1.0"

requires-python = ">=3.13"
dependencies = [
    "aiodns>=3.2.0",
    "aiohttp>=3.11.11",
    "aiohttp-middlewares>=2.4.0",
    "certifi>=2024.12.14",
    "dataclasses-json>=0.6.7",
    "gunicorn>=23.0.0",
    "marshmallow>=3.25.1",
    "motor>=3.6.0",
    "multidict>=6.1.0",
    "pyjwt>=2.10.1",
    "python-dotenv>=1.0.1",
    "python-json-logger>=3.2.1",
]

[project.urls]
documentation = "https://langrenn-sprint.github.io/competition-format-service/"
source = "https://github.com/langrenn-sprint/competition-format-service"


[dependency-groups]
dev = [
    "aiohttp-devtools>=1.1.2",
    "poethepoet>=0.29.0",
    "pyright>=1.1.386",
    "pytest-aiohttp>=1.0.5",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-docker>=3.1.1",
    "pytest-env>=1.1.5",
    "pytest-mock>=3.14.0",
    "pytest>=8.3.3",
    "requests>=2.32.3",
    "ruff>=0.7.1",
    "aioresponses>=0.7.7",
    "deptry>=0.22.0",
    "pip-audit>=2.7.3",
]

[tool.ruff.lint]
select = ["ALL"]
# and then manually ignore annoying ones:
ignore = ["COM812", "ISC001", "T201", "G004", "E501", "ANN401"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101",     # asserts allowed in tests...
    "ANN401",   # Any should be allowed
    "PTH118",
    "PTH123",
    "ASYNC230",
    "ARG001",
]
[tool.ruff.lint.isort]
# so it knows to group first-party stuff last
known-first-party = ["competition_format_service"]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.deptry.per_rule_ignores]
DEP002 = ["aiodns", "certifi", "pyjwt"]

[tool.pytest.ini_options]
env = [
    "CONFIG=test",
    "JWT_SECRET=secret",
    "ADMIN_USERNAME=admin",
    "ADMIN_PASSWORD=password",
    "JWT_EXP_DELTA_SECONDS=60",
    "DB_NAME=users_test",
    "DB_USER=admin",
    "DB_PASSWORD=admin",
    "LOGGING_LEVEL=DEBUG",
    "USERS_HOST_SERVER=localhost",
    "USERS_HOST_PORT=8081",
]
asyncio_mode = "auto"
markers = [
    "unit: marks tests as unit",
    "integration: marks tests as integration",
    "contract: marks tests as contract",
]

[tool.coverage.paths]
source = ["competition_format_service", "*/site-packages"]

[tool.coverage.run]
branch = false
omit = ["*gunicorn_config.py", "users_adapter.py", "adapter.py"]
source = ["competition_format_service"]

[tool.coverage.report]
fail_under = 100
show_missing = true

[tool.poe.tasks]
format = { cmd = "uv run ruff format" }
lint = { cmd = "uv run ruff check --fix" }
pyright = { cmd = "uv run pyright" }
check_deps = { cmd = "uv run deptry ." }
audit = { cmd = "uv run pip-audit" }
unit_test = { cmd = "uv run pytest -m unit", env = { "CONFIG" = "test" } }
integration_test = { cmd = "uv run pytest -m integration -s --cov --cov-report=term-missing --cov-report=html:.htmlcov", env = { "CONFIG" = "test" } }
contract_test = { cmd = "uv run pytest -m contract" }
release = { sequence = [
    "lint",
    "pyright",
    "check_deps",
    "audit",
    "unit_test",
    "integration_test",
    "contract_test",
] }
